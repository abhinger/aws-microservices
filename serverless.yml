service:
  name: book-service

plugins:
  - serverless-bundle
  - serverless-pseudo-parameters

provider:
  name: aws
  runtime: nodejs14.x
  memorySize: 256
  stage: ${opt:stage, 'dev'}
  region: eu-west-1
  environment:
    BOOK_TABLE_NAME: ${self:custom.BookTable.name}
    ORDER_TABLE_NAME: ${self:custom.OrderTable.name}
    CURRENCY_CONVERSION_API: http://data.fixer.io/api/latest
    CURRENCY_CONVERSION_API_KEY: 38c5984951718a99a9e61211d9852f41
  iamRoleStatements:
    - ${file(iam/BookTableIAM.yml):BookTableIAM}
    - ${file(iam/OrderTableIAM.yml):OrderTableIAM}
resources:
  Resources:
    BookTable: ${file(resources/BookTable.yml):BookTable}
    OrderTable: ${file(resources/OrderTable.yml):OrderTable}

functions:
  addBook:
    handler: src/handlers/addBook.handler
    events:
      - http:
          method: POST
          path: /addBook
          authorizer: ${self:custom.authorizer}

  getBooks:
    handler: src/handlers/getBooks.handler
    events:
      - http:
          method: GET
          path: /getBooks
          authorizer: ${self:custom.authorizer}

  getBook:
    handler: src/handlers/getBook.handler
    events:
      - http:
          method: GET
          path: /getBook/{id}
          authorizer: ${self:custom.authorizer}

  updateStock:
    handler: src/handlers/updateStock.handler
    events:
      - http:
          method: PATCH
          path: updateStock/{id}/stock
          authorizer: ${self:custom.authorizer}

  getUser:
    handler: src/handlers/getUser.handler
    events:
      - http:
          method: GET
          path: /getUser
          authorizer: ${self:custom.authorizer}

  placeOrder:
    handler: src/handlers/placeOrder.handler
    events:
      - http:
          method: POST
          path: /placeOrder/{id}
          authorizer: ${self:custom.authorizer}

  getOrders:
    handler: src/handlers/getOrders.handler
    events:
      - http:
          method: GET
          path: /getOrders
          authorizer: ${self:custom.authorizer}

  getUserOrders:
    handler: src/handlers/getUserOrders.handler
    events:
      - http:
          method: GET
          path: /getUserOrders
          authorizer: ${self:custom.authorizer}

  currencyConversion:
    handler: src/handlers/currencyConversion.handler
    events:
      - http:
          method: POST
          path: /currencyConversion
          authorizer: ${self:custom.authorizer}

custom:
  authorizer: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:auth-service-${self:provider.stage}-auth
  BookTable:
    name: !Ref BookTable
    arn: !GetAtt BookTable.Arn
  OrderTable:
    name: !Ref OrderTable
    arn: !GetAtt OrderTable.Arn
  bundle:
    linting: false
